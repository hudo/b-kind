// <auto-generated />
using BKind.Web.Infrastructure.Persistance;
using BKind.Web.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace BKind.Web.Migrations
{
    [DbContext(typeof(StoriesDbContext))]
    [Migration("20180314223050_AddPages")]
    partial class AddPages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("BKind.Web.Model.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTimeOffset>("Modified");

                    b.Property<int>("ModifiedBy");

                    b.Property<DateTimeOffset>("Published");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("Slug");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("BKind.Web.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Role");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Role");
                });

            modelBuilder.Entity("BKind.Web.Model.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<bool>("Pinned");

                    b.Property<string>("Slug");

                    b.Property<int>("Status");

                    b.Property<int>("ThumbsUp");

                    b.Property<string>("Title");

                    b.Property<int>("Views");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("BKind.Web.Model.StoryTags", b =>
                {
                    b.Property<int>("StoryId");

                    b.Property<int>("TagId");

                    b.HasKey("StoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("StoryTags");
                });

            modelBuilder.Entity("BKind.Web.Model.StoryVotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StoryId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("Voted");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("StoryVotes");
                });

            modelBuilder.Entity("BKind.Web.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BKind.Web.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("PasswordHash");

                    b.Property<DateTime>("Registered");

                    b.Property<string>("Salt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BKind.Web.Model.Administrator", b =>
                {
                    b.HasBaseType("BKind.Web.Model.Role");


                    b.ToTable("Administrator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("BKind.Web.Model.Author", b =>
                {
                    b.HasBaseType("BKind.Web.Model.Role");


                    b.ToTable("Author");

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("BKind.Web.Model.Reviewer", b =>
                {
                    b.HasBaseType("BKind.Web.Model.Role");


                    b.ToTable("Reviewer");

                    b.HasDiscriminator().HasValue("Reviewer");
                });

            modelBuilder.Entity("BKind.Web.Model.Visitor", b =>
                {
                    b.HasBaseType("BKind.Web.Model.Role");


                    b.ToTable("Visitor");

                    b.HasDiscriminator().HasValue("Visitor");
                });

            modelBuilder.Entity("BKind.Web.Model.Page", b =>
                {
                    b.HasOne("BKind.Web.Model.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BKind.Web.Model.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKind.Web.Model.Role", b =>
                {
                    b.HasOne("BKind.Web.Model.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKind.Web.Model.Story", b =>
                {
                    b.HasOne("BKind.Web.Model.Author", "Author")
                        .WithMany("Stories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKind.Web.Model.StoryTags", b =>
                {
                    b.HasOne("BKind.Web.Model.Story", "Story")
                        .WithMany("StoryTags")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BKind.Web.Model.Tag", "Tag")
                        .WithMany("StoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BKind.Web.Model.StoryVotes", b =>
                {
                    b.HasOne("BKind.Web.Model.Story", "Story")
                        .WithMany("Votes")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BKind.Web.Model.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
